name: Experience

on:
  workflow_dispatch:

  schedule:
    - cron: 17 */6 * * *

env:
  TG_TOKEN: ${{ secrets.TG_TOKEN }}
  TG_CHATID: ${{ secrets.TG_CHATID }}

jobs:
  misc:
    name: Miscellaneous Sites
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: python -m pip install --upgrade requests
      - name: BYZH Experience
        env:
          COOKIE: ${{ secrets.BYZH_COOKIE }}
        run: python Experience/buyizhihuo.py || echo "BYZH_FAIL=true" >> $GITHUB_ENV
      - name: Notify
        if: env.BYZH_FAIL
        run: |
          [ $BYZH_FAIL ] && python Notify.py '不移之火'

  hostloc_get_points:
    name: Hostloc Get Points
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Set Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          git clone --depth 1 https://github.com/Arronlong/py_scripts Experience
          python -m pip install -r Experience/requirements.txt
      - name: Install SeleniumBase
        run: |
          cd Experience && python setup.py install
      - name: Install Chrome and Firefox
        run: |
          sudo apt install google-chrome-stable
          sudo apt-get install firefox
      - name: Get points
        id: hostloc_get_points
        env:
          HOSTLOC_USERNAME: ${{ secrets.HOSTLOC_USERNAME }}
          HOSTLOC_PASSWORD: ${{ secrets.HOSTLOC_PASSWORD }}
        run: python Experience/scripts/hostloc/hostloc_get_points.py || echo "::set-output name=status::Error"
      - uses: actions/checkout@v2
        if: steps.hostloc_get_points.outputs.status == 'Error'
      - name: Notify
        if: steps.hostloc_get_points.outputs.status == 'Error'
        run: python Notify.py 'Hostloc'
          
  tieba_experience:
    name: TieBa Experience
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Set Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install dependencies
        run: |
          git clone --depth 1 https://github.com/ghosx/tieba Experience
          python -m pip install --upgrade requests
      - name: Experience
        id: tieba_experience
        env:
          BDUSS: ${{ secrets.BAIDU_BDUSS }}
        run: python Experience/main.py || echo "::set-output name=status::Error"
      - uses: actions/checkout@v2
        if: steps.tieba_experience.outputs.status == 'Error'
      - name: Notify
        if: steps.tieba_experience.outputs.status == 'Error'
        run: python Notify.py '贴吧'
  
  cloud189:
    name: Cloud189 Experience
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Set Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          git clone --depth 1 https://github.com/mengshouer/CheckinBox Experience
          pip3 install -r Experience/requirements.txt
      - name: Experience
        id: cloud189_experience
        env:
          username: ${{ secrets.CLOUD189_USER }}
          password: ${{ secrets.CLOUD189_PW }}
        run: |
          python Experience/Cloud189Checkin/C189CheckinForSCF.py > msg && cat msg
          [[ $(grep '出错' msg) ]] && echo "::set-output name=status::Error" || true
      - uses: actions/checkout@v2
        if: steps.cloud189_experience.outputs.status == 'Error'
      - name: Notify
        if: steps.cloud189_experience.outputs.status == 'Error'
        run: python Notify.py '天翼云盘'

  pojie:
    name: 52Pojie Experience
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Set Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          git clone --depth 1 https://github.com/mengshouer/CheckinBox Experience
          pip3 install -r Experience/requirements.txt
      - name: Experience
        id: pojie_experience
        env:
          cookie_52pj: ${{ secrets.PJ_COOKIE }}
        run: |
          python Experience/Checkin52pj/Checkin52pjForSCF.py > msg && cat msg
          [[ $(grep '失效|出错' msg) ]] && echo "::set-output name=status::Error" || true
      - uses: actions/checkout@v2
        if: steps.pojie_experience.outputs.status == 'Error'
      - name: Notify
        if: steps.pojie_experience.outputs.status == 'Error'
        run: python Notify.py '吾爱破解'
  
  pt_experience:
    name: PT Sites Experience
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Experience
        env:
          URL: ${{ secrets.FLEXGET_CONFIG_URL }}
        run: |
          mkdir /tmp/config
          git clone --depth 1 https://github.com/IvonWei/flexget_qbittorrent_mod.git /tmp/config/plugins
          curl -L ${{ secrets.FLEXGET_CONFIG_URL }} -o /tmp/config/config.yml
          docker run -d --name flexget -v /tmp/config:/config madwind/flexget
          sleep 60 && docker exec flexget flexget execute && docker rm -f flexget

  euserv:
    name: EUserv Extend
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Clone
        run: git clone --depth 1 https://github.com/CokeMine/EUserv_extend Experience
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: python -m pip install --upgrade requests beautifulsoup4
      - name: EUserv Extend
        id: euserv_extend
        env:
          USERNAME: ${{ secrets.EUSERV_USERNAME }}
          PASSWORD: ${{ secrets.EUSERV_PASSWORD }}
        run: |
          python Experience/main.py > msg && cat msg
          [[ $(grep '登陆失败' msg) || $(grep 'Error' msg) ]] && echo "::set-output name=status::Error" || true
      - uses: actions/checkout@v2
        if: steps.euserv_extend.outputs.status == 'Error'
      - name: Notify
        if: steps.euserv_extend.outputs.status == 'Error'
        run: python Notify.py 'EUserv续期'

  freenom:
    runs-on: ubuntu-latest
    name: Freenom Extend
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Clone
        run: git clone --depth 1 https://github.com/luolongfei/freenom Experience
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.2'
      - name: Setting
        run: |
          cd Experience && cp .env.example .env
          sed -i "s/^FREENOM_USERNAME=.*$/FREENOM_USERNAME='${{ secrets.FREENOM_USERNAME }}'/" .env
          sed -i "s/^FREENOM_PASSWORD=.*$/FREENOM_PASSWORD='${{ secrets.FREENOM_PASSWORD }}'/" .env
          sed -i "s/^MAIL_ENABLE=.*$/MAIL_ENABLE=false/" .env
          sed -i "s/^TELEGRAM_CHAT_ID=.*$/TELEGRAM_CHAT_ID='${{ secrets.TG_CHATID }}'/" .env
          sed -i "s/^TELEGRAM_BOT_TOKEN=.*$/TELEGRAM_BOT_TOKEN='${{ secrets.TG_TOKEN }}'/" .env
          sed -i "s/^TELEGRAM_BOT_ENABLE=.*$/TELEGRAM_BOT_ENABLE=true/" .env
          sed -i "s/^NOTICE_FREQ=.*$/NOTICE_FREQ=0/" .env
          sed -i "s/^ON_GITHUB_ACTIONS=.*$/ON_GITHUB_ACTIONS=true/" .env
      - name: Run
        run: cd Experience && php run

  ccb:
    name: CCB Experience
    runs-on: ubuntu-latest
    steps:
      - name: Sleep Random Time
        run: sleep $(shuf -i 10-60 -n 1)
      - name: Clone
        run: git clone --depth 1 https://github.com/leeyiding/get_CCB Experience
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: python -m pip install -r Experience/requirements.txt
      - name: CCB Experience
        env:
          XSRF_TOKEN: ${{ secrets.CCB_XSRF_TOKEN }}
          SESSION: ${{ secrets.CCB_SESSION }}
        run: |
          cd Experience && mv config.sample.json config.json
          sed -i "s/\"XSRF-TOKEN\": \".*\"/\"XSRF-TOKEN\": \"$XSRF_TOKEN\"/g" config.json
          sed -i "s/\"_session\": \".*\"/\"_session\": \"$SESSION\"/g" config.json
          python main.py
